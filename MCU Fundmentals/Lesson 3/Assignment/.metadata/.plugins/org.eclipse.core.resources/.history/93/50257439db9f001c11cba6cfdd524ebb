/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//Learn-in-depth
//Keroles Shenouda
//Mastering_EmbeddedSystem online diploma
typedef volatile unsigned int vuint32_t;
#include<stdint.h>
#include<stdlib.h>
#include<stdio.h>
// register address
#define GPIOA_BASE 0x40010800
#define GPIOA_CRH *(volatile uint32_t *)(GPIOA_BASE + 0x04)
#define GPIOA_ODR *(volatile uint32_t *)(GPIOA_BASE + 0x0C)

//Clock registers
#define RCC_BASE 0x40021000
//Enable Clock Register
#define RCC_APB2ENR *(volatile uint32_t *)(RCC_BASE + 0x18)

//Lab 1
// Clock configuration register
#define  RCC_CFGR *(volatile uint32_t *)(RCC_BASE + 0x04)



#define GPIOA_BASE 0x40010800

int main(void)
{
	// Set Clock of APB2 Bus = 4 MHZ
	// modify prescaler of ABP2 to satisfy requirement
	RCC_CFGR |= ((0b101)<<11);
	// Set Clock of APB1 Bus = 2 MHZ
	// modify prescaler of ABP1 to satisfy requirement

	RCC_CFGR |= ((0b100)<<8);

	//Enable PortA Clock
	RCC_APB2ENR |= (1<<2);
	//InitGPIOA
	GPIOA_CRH &= 0xFF0FFFFF;
	GPIOA_CRH |= 0x00200000;
	while(1)
	{
		GPIOA_ODR |= 1<<13 ;
		for(int i = 0; i < 5000; i++); // arbitrary delay
		GPIOA_ODR &= ~(1<<13) ;
		for(int i = 0; i < 5000; i++); // arbitrary delay
	}

}
